name: Build macOS executable

on:
  workflow_dispatch:
  push:
    # Support both main and master branches in case default branch differs
    branches: [ main, master ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          brew update || true
          brew install imagemagick || true

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller pillow

      - name: Convert icon.ico -> icon.png using Pillow (more reliable than ImageMagick)
        run: |
          python - <<'PY'
          from PIL import Image
          import os
          if os.path.exists('icon.ico'):
              try:
                  img = Image.open('icon.ico')
                  # Save a reasonably large PNG for icon generation
                  img.save('icon.png')
                  print('Saved icon.png')
              except Exception as e:
                  print('Failed to convert icon.ico:', e)
          else:
              print('icon.ico not found; skipping conversion')
          PY

      - name: Generate icon.icns if icon.png exists
        run: |
          if [ -f icon.png ]; then
            mkdir -p icon.iconset
            sips -z 16 16 icon.png --out icon.iconset/icon_16x16.png
            sips -z 32 32 icon.png --out icon.iconset/icon_16x16@2x.png
            sips -z 32 32 icon.png --out icon.iconset/icon_32x32.png
            sips -z 64 64 icon.png --out icon.iconset/icon_32x32@2x.png
            sips -z 128 128 icon.png --out icon.iconset/icon_128x128.png
            sips -z 256 256 icon.png --out icon.iconset/icon_128x128@2x.png
            sips -z 256 256 icon.png --out icon.iconset/icon_256x256.png
            sips -z 512 512 icon.png --out icon.iconset/icon_256x256@2x.png
            sips -z 512 512 icon.png --out icon.iconset/icon_512x512.png
            sips -z 1024 1024 icon.png --out icon.iconset/icon_512x512@2x.png
            iconutil -c icns icon.iconset -o icon.icns || true
          else
            echo 'icon.png not found; skipping icon.icns generation'
          fi

      - name: Build macOS .app with PyInstaller
        run: |
          # Build an application bundle (.app) instead of a single-file executable.
          # This prevents Terminal from opening when users double-click the app.
          if [ -f icon.icns ]; then
            ICON_ARG="--icon icon.icns"
          else
            ICON_ARG=""
          fi
          python -m PyInstaller --windowed --name "PasswordLocker" $ICON_ARG main.py

      - name: Package .app into zip (use ditto) and generate diagnostics
        run: |
          set -e
          APPNAME="PasswordLocker.app"
          mkdir -p release
          if [ -d "dist/$APPNAME" ]; then
            cd dist
            # Use ditto to create a compressed archive that preserves macOS resource forks
            ZIPNAME="PasswordLocker-mac.zip"
            ditto -c -k --sequesterRsrc --keepParent "$APPNAME" "$ZIPNAME"
            mv "$ZIPNAME" ../release/ || true
            cd ..
            echo "Packaged dist/$APPNAME -> release/PasswordLocker-mac.zip"

            # Diagnostics: record file info for the embedded executable
            BINARY="dist/$APPNAME/Contents/MacOS/PasswordLocker"
            DIAG=release/build-info.txt
            echo "--- ls -la dist/$APPNAME/Contents/MacOS ---" > "$DIAG"
            ls -la "dist/$APPNAME/Contents/MacOS" >> "$DIAG" 2>&1 || true
            echo "" >> "$DIAG"
            echo "--- file ---" >> "$DIAG"
            file "$BINARY" >> "$DIAG" 2>&1 || true
            echo "" >> "$DIAG"
            echo "--- stat ---" >> "$DIAG"
            stat -f "%N %z bytes %Sp" "$BINARY" >> "$DIAG" 2>&1 || true
            echo "" >> "$DIAG"
            echo "--- hexdump (first 256 bytes) ---" >> "$DIAG"
            hexdump -C -n 256 "$BINARY" >> "$DIAG" 2>&1 || true
            echo "" >> "$DIAG"
            echo "--- strings (first 200 lines) ---" >> "$DIAG"
            strings "$BINARY" | head -n 200 >> "$DIAG" 2>&1 || true
            echo "" >> "$DIAG"
            echo "--- sha256 ---" >> "$DIAG"
            shasum -a 256 "$BINARY" >> "$DIAG" 2>&1 || true
            echo "" >> "$DIAG"
            echo "Diagnostics written to release/build-info.txt"
          else
            echo "Warning: dist/$APPNAME not found; listing dist contents:";
            ls -la dist || true
            # create an empty diag so upload step has something
            echo "dist/$APPNAME not found" > release/build-info.txt || true
          fi

      - name: Upload mac .app zip artifact (with fallbacks)
        uses: actions/upload-artifact@v4
        with:
          name: mac-executable
          # Try multiple possible locations / patterns so upload doesn't fail if zip ended up elsewhere
          path: |
            release/PasswordLocker-mac.zip
            dist/PasswordLocker-mac.zip
            dist/PasswordLocker.app
            dist/*.zip
            release/*.zip
